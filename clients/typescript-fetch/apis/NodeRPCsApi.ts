// tslint:disable
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountBalanceRequest,
    AccountBalanceRequestFromJSON,
    AccountBalanceRequestToJSON,
    AccountBalanceResponse,
    AccountBalanceResponseFromJSON,
    AccountBalanceResponseToJSON,
    AccountBlockCountRequest,
    AccountBlockCountRequestFromJSON,
    AccountBlockCountRequestToJSON,
    AccountBlockCountResponse,
    AccountBlockCountResponseFromJSON,
    AccountBlockCountResponseToJSON,
    AccountGetRequest,
    AccountGetRequestFromJSON,
    AccountGetRequestToJSON,
    AccountGetResponse,
    AccountGetResponseFromJSON,
    AccountGetResponseToJSON,
    AccountHistoryRequest,
    AccountHistoryRequestFromJSON,
    AccountHistoryRequestToJSON,
    AccountHistoryResponse,
    AccountHistoryResponseFromJSON,
    AccountHistoryResponseToJSON,
    AccountInfoRequest,
    AccountInfoRequestFromJSON,
    AccountInfoRequestToJSON,
    AccountInfoResponse,
    AccountInfoResponseFromJSON,
    AccountInfoResponseToJSON,
    AccountsPendingRequest,
    AccountsPendingRequestFromJSON,
    AccountsPendingRequestToJSON,
    AccountsPendingResponse,
    AccountsPendingResponseFromJSON,
    AccountsPendingResponseToJSON,
    BlockCreateRequest,
    BlockCreateRequestFromJSON,
    BlockCreateRequestToJSON,
    BlockCreateResponse,
    BlockCreateResponseFromJSON,
    BlockCreateResponseToJSON,
    KeyCreateRequest,
    KeyCreateRequestFromJSON,
    KeyCreateRequestToJSON,
    KeyCreateResponse,
    KeyCreateResponseFromJSON,
    KeyCreateResponseToJSON,
    ProcessRequest,
    ProcessRequestFromJSON,
    ProcessRequestToJSON,
    ProcessResponse,
    ProcessResponseFromJSON,
    ProcessResponseToJSON,
    WorkGenerateRequest,
    WorkGenerateRequestFromJSON,
    WorkGenerateRequestToJSON,
    WorkGenerateResponse,
    WorkGenerateResponseFromJSON,
    WorkGenerateResponseToJSON,
} from '../models';

export interface AccountBalanceRequest {
    accountBalanceRequest?: AccountBalanceRequest;
}

export interface AccountBlockCountRequest {
    accountBlockCountRequest?: AccountBlockCountRequest;
}

export interface AccountGetRequest {
    accountGetRequest?: AccountGetRequest;
}

export interface AccountHistoryRequest {
    accountHistoryRequest?: AccountHistoryRequest;
}

export interface AccountInfoRequest {
    accountInfoRequest?: AccountInfoRequest;
}

export interface AccountsPendingRequest {
    accountsPendingRequest?: AccountsPendingRequest;
}

export interface BlockCreateRequest {
    blockCreateRequest?: BlockCreateRequest;
}

export interface KeyCreateRequest {
    keyCreateRequest?: KeyCreateRequest;
}

export interface ProcessRequest {
    processRequest?: ProcessRequest;
}

export interface WorkGenerateRequest {
    workGenerateRequest?: WorkGenerateRequest;
}

/**
 * no description
 */
export class NodeRPCsApi extends runtime.BaseAPI {

    /**
     * Returns how many RAW is owned and how many have not yet been received by **account** > This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     */
    async accountBalanceRaw(requestParameters: AccountBalanceRequest): Promise<runtime.ApiResponse<AccountBalanceResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#account_balance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountBalanceRequestToJSON(requestParameters.accountBalanceRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountBalanceResponseFromJSON(jsonValue));
    }

    /**
     * Returns how many RAW is owned and how many have not yet been received by **account** > This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     */
    async accountBalance(requestParameters: AccountBalanceRequest): Promise<AccountBalanceResponse> {
        const response = await this.accountBalanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get number of blocks for a specific account
     */
    async accountBlockCountRaw(requestParameters: AccountBlockCountRequest): Promise<runtime.ApiResponse<AccountBlockCountResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#account_block_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountBlockCountRequestToJSON(requestParameters.accountBlockCountRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountBlockCountResponseFromJSON(jsonValue));
    }

    /**
     * Get number of blocks for a specific account
     */
    async accountBlockCount(requestParameters: AccountBlockCountRequest): Promise<AccountBlockCountResponse> {
        const response = await this.accountBlockCountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get account for the public key
     */
    async accountGetRaw(requestParameters: AccountGetRequest): Promise<runtime.ApiResponse<AccountGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#account_get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountGetRequestToJSON(requestParameters.accountGetRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountGetResponseFromJSON(jsonValue));
    }

    /**
     * Get account for the public key
     */
    async accountGet(requestParameters: AccountGetRequest): Promise<AccountGetResponse> {
        const response = await this.accountGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the account history. Reports send/receive information for an account. 
     */
    async accountHistoryRaw(requestParameters: AccountHistoryRequest): Promise<runtime.ApiResponse<AccountHistoryResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#account_history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountHistoryRequestToJSON(requestParameters.accountHistoryRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Gets the account history. Reports send/receive information for an account. 
     */
    async accountHistory(requestParameters: AccountHistoryRequest): Promise<AccountHistoryResponse> {
        const response = await this.accountHistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise. 
     */
    async accountInfoRaw(requestParameters: AccountInfoRequest): Promise<runtime.ApiResponse<AccountInfoResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#account_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountInfoRequestToJSON(requestParameters.accountInfoRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoResponseFromJSON(jsonValue));
    }

    /**
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise. 
     */
    async accountInfo(requestParameters: AccountInfoRequest): Promise<AccountInfoResponse> {
        const response = await this.accountInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of block hashes which have not yet been received by these accounts
     */
    async accountsPendingRaw(requestParameters: AccountsPendingRequest): Promise<runtime.ApiResponse<AccountsPendingResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#accounts_pending`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountsPendingRequestToJSON(requestParameters.accountsPendingRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsPendingResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of block hashes which have not yet been received by these accounts
     */
    async accountsPending(requestParameters: AccountsPendingRequest): Promise<AccountsPendingResponse> {
        const response = await this.accountsPendingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing. 
     */
    async blockCreateRaw(requestParameters: BlockCreateRequest): Promise<runtime.ApiResponse<BlockCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#block_create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockCreateRequestToJSON(requestParameters.blockCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockCreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing. 
     */
    async blockCreate(requestParameters: BlockCreateRequest): Promise<BlockCreateResponse> {
        const response = await this.blockCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Generates an **adhoc random** keypair 
     */
    async keyCreateRaw(requestParameters: KeyCreateRequest): Promise<runtime.ApiResponse<KeyCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#key_create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyCreateRequestToJSON(requestParameters.keyCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyCreateResponseFromJSON(jsonValue));
    }

    /**
     * Generates an **adhoc random** keypair 
     */
    async keyCreate(requestParameters: KeyCreateRequest): Promise<KeyCreateResponse> {
        const response = await this.keyCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Publish block to the network
     */
    async processRaw(requestParameters: ProcessRequest): Promise<runtime.ApiResponse<ProcessResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#process`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessRequestToJSON(requestParameters.processRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessResponseFromJSON(jsonValue));
    }

    /**
     * Publish block to the network
     */
    async process(requestParameters: ProcessRequest): Promise<ProcessResponse> {
        const response = await this.processRaw(requestParameters);
        return await response.value();
    }

    /**
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key 
     */
    async workGenerateRaw(requestParameters: WorkGenerateRequest): Promise<runtime.ApiResponse<WorkGenerateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#work_generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkGenerateRequestToJSON(requestParameters.workGenerateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGenerateResponseFromJSON(jsonValue));
    }

    /**
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key 
     */
    async workGenerate(requestParameters: WorkGenerateRequest): Promise<WorkGenerateResponse> {
        const response = await this.workGenerateRaw(requestParameters);
        return await response.value();
    }

}
