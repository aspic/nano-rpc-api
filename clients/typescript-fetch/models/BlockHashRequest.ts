/* tslint:disable */
/* eslint-disable */
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BlockDataJson,
    BlockDataJsonFromJSON,
    BlockDataJsonFromJSONTyped,
    BlockDataJsonToJSON,
    ModelBoolean,
    ModelBooleanFromJSON,
    ModelBooleanFromJSONTyped,
    ModelBooleanToJSON,
} from './';

/**
 * 
 * @export
 * @interface BlockHashRequest
 */
export interface BlockHashRequest {
    /**
     * 
     * @type {string}
     * @memberof BlockHashRequest
     */
    action: BlockHashRequestActionEnum;
    /**
     * Defaults to `"false"`. If `"true"`, `"block"` contains a JSON subtree instead of a JSON string.
     * @type {ModelBoolean}
     * @memberof BlockHashRequest
     */
    jsonBlock?: ModelBoolean;
    /**
     * 
     * @type {BlockDataJson}
     * @memberof BlockHashRequest
     */
    block: BlockDataJson;
}

export function BlockHashRequestFromJSON(json: any): BlockHashRequest {
    return BlockHashRequestFromJSONTyped(json, false);
}

export function BlockHashRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockHashRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'jsonBlock': !exists(json, 'json_block') ? undefined : ModelBooleanFromJSON(json['json_block']),
        'block': BlockDataJsonFromJSON(json['block']),
    };
}

export function BlockHashRequestToJSON(value?: BlockHashRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'json_block': ModelBooleanToJSON(value.jsonBlock),
        'block': BlockDataJsonToJSON(value.block),
    };
}

/**
* @export
* @enum {string}
*/
export enum BlockHashRequestActionEnum {
    BlockInfo = 'block_info'
}


