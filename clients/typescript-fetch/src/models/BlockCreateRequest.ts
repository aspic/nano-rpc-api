/* tslint:disable */
/* eslint-disable */
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ModelBoolean,
    ModelBooleanFromJSON,
    ModelBooleanFromJSONTyped,
    ModelBooleanToJSON,
} from './';

/**
 * 
 * @export
 * @interface BlockCreateRequest
 */
export interface BlockCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    action?: BlockCreateRequestActionEnum;
    /**
     * Defaults to `"false"`. If `"true"`, `"block"` contains a JSON subtree instead of a JSON string.
     * @type {ModelBoolean}
     * @memberof BlockCreateRequest
     */
    jsonBlock?: ModelBoolean;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    type?: BlockCreateRequestTypeEnum;
    /**
     * 1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc.
     * @type {number}
     * @memberof BlockCreateRequest
     */
    balance?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    representative?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    work?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    previous?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    wallet?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockCreateRequest
     */
    account?: string;
}

export function BlockCreateRequestFromJSON(json: any): BlockCreateRequest {
    return BlockCreateRequestFromJSONTyped(json, false);
}

export function BlockCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockCreateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : json['action'],
        'jsonBlock': !exists(json, 'json_block') ? undefined : ModelBooleanFromJSON(json['json_block']),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'representative': !exists(json, 'representative') ? undefined : json['representative'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'work': !exists(json, 'work') ? undefined : json['work'],
        'previous': !exists(json, 'previous') ? undefined : json['previous'],
        'wallet': !exists(json, 'wallet') ? undefined : json['wallet'],
        'account': !exists(json, 'account') ? undefined : json['account'],
    };
}

export function BlockCreateRequestToJSON(value?: BlockCreateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'json_block': ModelBooleanToJSON(value.jsonBlock),
        'type': value.type,
        'balance': value.balance,
        'key': value.key,
        'representative': value.representative,
        'link': value.link,
        'work': value.work,
        'previous': value.previous,
        'wallet': value.wallet,
        'account': value.account,
    };
}

/**
* @export
* @enum {string}
*/
export enum BlockCreateRequestActionEnum {
    BlockCreate = 'block_create'
}
/**
* @export
* @enum {string}
*/
export enum BlockCreateRequestTypeEnum {
    State = 'state'
}


