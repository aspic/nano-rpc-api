// tslint:disable
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlockDataJson
 */
export interface BlockDataJson {
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    type?: BlockDataJsonTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    account?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    previous?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    representative?: string;
    /**
     * 1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc.
     * @type {number}
     * @memberof BlockDataJson
     */
    balance?: number;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    linkAsAccount?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    signature?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockDataJson
     */
    work?: string;
}

export function BlockDataJsonFromJSON(json: any): BlockDataJson {
    return {
        'type': !exists(json, 'type') ? undefined : json['type'],
        'account': !exists(json, 'account') ? undefined : json['account'],
        'previous': !exists(json, 'previous') ? undefined : json['previous'],
        'representative': !exists(json, 'representative') ? undefined : json['representative'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'linkAsAccount': !exists(json, 'link_as_account') ? undefined : json['link_as_account'],
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
        'work': !exists(json, 'work') ? undefined : json['work'],
    };
}

export function BlockDataJsonToJSON(value?: BlockDataJson): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'type': value.type,
        'account': value.account,
        'previous': value.previous,
        'representative': value.representative,
        'balance': value.balance,
        'link': value.link,
        'link_as_account': value.linkAsAccount,
        'signature': value.signature,
        'work': value.work,
    };
}

/**
* @export
* @enum {string}
*/
export enum BlockDataJsonTypeEnum {
    State = 'state'
}


