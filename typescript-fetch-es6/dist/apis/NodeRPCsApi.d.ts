/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AccountBalanceRequest, AccountBalanceResponse, AccountBlockCountRequest, AccountBlockCountResponse, AccountGetRequest, AccountGetResponse, AccountHistoryRequest, AccountHistoryResponse, AccountInfoRequest, AccountInfoResponse, AccountsPendingRequest, AccountsPendingResponse, BlockCreateRequest, BlockCreateResponse, KeyCreateRequest, KeyCreateResponse, ProcessRequest, ProcessResponse, WorkGenerateRequest, WorkGenerateResponse } from '../models';
export interface AccountBalanceRequest {
    accountBalanceRequest?: AccountBalanceRequest;
}
export interface AccountBlockCountRequest {
    accountBlockCountRequest?: AccountBlockCountRequest;
}
export interface AccountGetRequest {
    accountGetRequest?: AccountGetRequest;
}
export interface AccountHistoryRequest {
    accountHistoryRequest?: AccountHistoryRequest;
}
export interface AccountInfoRequest {
    accountInfoRequest?: AccountInfoRequest;
}
export interface AccountsPendingRequest {
    accountsPendingRequest?: AccountsPendingRequest;
}
export interface BlockCreateRequest {
    blockCreateRequest?: BlockCreateRequest;
}
export interface KeyCreateRequest {
    keyCreateRequest?: KeyCreateRequest;
}
export interface ProcessRequest {
    processRequest?: ProcessRequest;
}
export interface WorkGenerateRequest {
    workGenerateRequest?: WorkGenerateRequest;
}
/**
 * no description
 */
export declare class NodeRPCsApi extends runtime.BaseAPI {
    /**
     * Returns how many RAW is owned and how many have not yet been received by account
     * Returns RAW amount owned and not received
     */
    accountBalanceRaw(requestParameters: AccountBalanceRequest): Promise<runtime.ApiResponse<AccountBalanceResponse>>;
    /**
     * Returns how many RAW is owned and how many have not yet been received by account
     * Returns RAW amount owned and not received
     */
    accountBalance(requestParameters: AccountBalanceRequest): Promise<AccountBalanceResponse>;
    /**
     * Get number of blocks for a specific account
     */
    accountBlockCountRaw(requestParameters: AccountBlockCountRequest): Promise<runtime.ApiResponse<AccountBlockCountResponse>>;
    /**
     * Get number of blocks for a specific account
     */
    accountBlockCount(requestParameters: AccountBlockCountRequest): Promise<AccountBlockCountResponse>;
    /**
     * Get account for the public key
     */
    accountGetRaw(requestParameters: AccountGetRequest): Promise<runtime.ApiResponse<AccountGetResponse>>;
    /**
     * Get account for the public key
     */
    accountGet(requestParameters: AccountGetRequest): Promise<AccountGetResponse>;
    /**
     * Reports send/receive information for an account.
     * Gets account history
     */
    accountHistoryRaw(requestParameters: AccountHistoryRequest): Promise<runtime.ApiResponse<AccountHistoryResponse>>;
    /**
     * Reports send/receive information for an account.
     * Gets account history
     */
    accountHistory(requestParameters: AccountHistoryRequest): Promise<AccountHistoryResponse>;
    /**
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise.
     * Gets account information
     */
    accountInfoRaw(requestParameters: AccountInfoRequest): Promise<runtime.ApiResponse<AccountInfoResponse>>;
    /**
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise.
     * Gets account information
     */
    accountInfo(requestParameters: AccountInfoRequest): Promise<AccountInfoResponse>;
    /**
     * Returns a list of block hashes which have not yet been received by these accounts
     */
    accountsPendingRaw(requestParameters: AccountsPendingRequest): Promise<runtime.ApiResponse<AccountsPendingResponse>>;
    /**
     * Returns a list of block hashes which have not yet been received by these accounts
     */
    accountsPending(requestParameters: AccountsPendingRequest): Promise<AccountsPendingResponse>;
    /**
     * Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing.
     * Creates state blocks
     */
    blockCreateRaw(requestParameters: BlockCreateRequest): Promise<runtime.ApiResponse<BlockCreateResponse>>;
    /**
     * Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing.
     * Creates state blocks
     */
    blockCreate(requestParameters: BlockCreateRequest): Promise<BlockCreateResponse>;
    /**
     * Generates an **adhoc random** keypair
     * Creates key pair
     */
    keyCreateRaw(requestParameters: KeyCreateRequest): Promise<runtime.ApiResponse<KeyCreateResponse>>;
    /**
     * Generates an **adhoc random** keypair
     * Creates key pair
     */
    keyCreate(requestParameters: KeyCreateRequest): Promise<KeyCreateResponse>;
    /**
     * Publish block to the network
     */
    processRaw(requestParameters: ProcessRequest): Promise<runtime.ApiResponse<ProcessResponse>>;
    /**
     * Publish block to the network
     */
    process(requestParameters: ProcessRequest): Promise<ProcessResponse>;
    /**
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key
     * Generates work for blocks
     */
    workGenerateRaw(requestParameters: WorkGenerateRequest): Promise<runtime.ApiResponse<WorkGenerateResponse>>;
    /**
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key
     * Generates work for blocks
     */
    workGenerate(requestParameters: WorkGenerateRequest): Promise<WorkGenerateResponse>;
}
