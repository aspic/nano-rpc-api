/*
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import no.mehl.nano.ApiCallback;
import no.mehl.nano.ApiClient;
import no.mehl.nano.ApiException;
import no.mehl.nano.ApiResponse;
import no.mehl.nano.Configuration;
import no.mehl.nano.Pair;
import no.mehl.nano.ProgressRequestBody;
import no.mehl.nano.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountBalanceRequest;
import org.openapitools.client.model.AccountBalanceResponse;
import org.openapitools.client.model.AccountBlockCountRequest;
import org.openapitools.client.model.AccountBlockCountResponse;
import org.openapitools.client.model.AccountGetRequest;
import org.openapitools.client.model.AccountGetResponse;
import org.openapitools.client.model.AccountHistoryRequest;
import org.openapitools.client.model.AccountHistoryResponse;
import org.openapitools.client.model.AccountInfoRequest;
import org.openapitools.client.model.AccountInfoResponse;
import org.openapitools.client.model.AccountKeyRequest;
import org.openapitools.client.model.AccountKeyResponse;
import org.openapitools.client.model.AccountRepresentativeRequest;
import org.openapitools.client.model.AccountRepresentativeResponse;
import org.openapitools.client.model.AccountWeightRequest;
import org.openapitools.client.model.AccountWeightResponse;
import org.openapitools.client.model.AccountsBalancesRequest;
import org.openapitools.client.model.AccountsBalancesResponse;
import org.openapitools.client.model.AccountsPendingRequest;
import org.openapitools.client.model.AccountsPendingResponse;
import org.openapitools.client.model.ActiveDifficultyRequest;
import org.openapitools.client.model.ActiveDifficultyResponse;
import org.openapitools.client.model.AvailableSupplyRequest;
import org.openapitools.client.model.AvailableSupplyResponse;
import org.openapitools.client.model.BlockAccountRequest;
import org.openapitools.client.model.BlockAccountResponse;
import org.openapitools.client.model.BlockConfirmRequest;
import org.openapitools.client.model.BlockConfirmResponse;
import org.openapitools.client.model.BlockCountRequest;
import org.openapitools.client.model.BlockCountResponse;
import org.openapitools.client.model.BlockCountTypeRequest;
import org.openapitools.client.model.BlockCountTypeResponse;
import org.openapitools.client.model.BlockCreateRequest;
import org.openapitools.client.model.BlockCreateResponse;
import org.openapitools.client.model.BlocksInfoRequest;
import org.openapitools.client.model.BlocksInfoResponse;
import org.openapitools.client.model.BlocksRequest;
import org.openapitools.client.model.BlocksResponse;
import org.openapitools.client.model.KeyCreateRequest;
import org.openapitools.client.model.KeyCreateResponse;
import org.openapitools.client.model.KeyExpandRequest;
import org.openapitools.client.model.KeyExpandResponse;
import org.openapitools.client.model.ProcessRequest;
import org.openapitools.client.model.ProcessResponse;
import org.openapitools.client.model.WorkGenerateRequest;
import org.openapitools.client.model.WorkGenerateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NodeRpCsApi {
    private ApiClient localVarApiClient;

    public NodeRpCsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NodeRpCsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for accountBalance
     * @param accountBalanceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns balance and pending </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountBalanceCall(AccountBalanceRequest accountBalanceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountBalanceRequest;

        // create path and map variables
        String localVarPath = "/#account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountBalanceValidateBeforeCall(AccountBalanceRequest accountBalanceRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountBalanceCall(accountBalanceRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns how many RAW is owned and how many have not yet been received by **account** &gt; This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     * @param accountBalanceRequest  (optional)
     * @return AccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns balance and pending </td><td>  -  </td></tr>
     </table>
     */
    public AccountBalanceResponse accountBalance(AccountBalanceRequest accountBalanceRequest) throws ApiException {
        ApiResponse<AccountBalanceResponse> localVarResp = accountBalanceWithHttpInfo(accountBalanceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns how many RAW is owned and how many have not yet been received by **account** &gt; This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     * @param accountBalanceRequest  (optional)
     * @return ApiResponse&lt;AccountBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns balance and pending </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountBalanceResponse> accountBalanceWithHttpInfo(AccountBalanceRequest accountBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = accountBalanceValidateBeforeCall(accountBalanceRequest, null);
        Type localVarReturnType = new TypeToken<AccountBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns how many RAW is owned and how many have not yet been received by **account** &gt; This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     * @param accountBalanceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns balance and pending </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountBalanceAsync(AccountBalanceRequest accountBalanceRequest, final ApiCallback<AccountBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountBalanceValidateBeforeCall(accountBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountBlockCount
     * @param accountBlockCountRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountBlockCountCall(AccountBlockCountRequest accountBlockCountRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountBlockCountRequest;

        // create path and map variables
        String localVarPath = "/#account_block_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountBlockCountValidateBeforeCall(AccountBlockCountRequest accountBlockCountRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountBlockCountCall(accountBlockCountRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get number of blocks for a specific account
     * @param accountBlockCountRequest  (optional)
     * @return AccountBlockCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks </td><td>  -  </td></tr>
     </table>
     */
    public AccountBlockCountResponse accountBlockCount(AccountBlockCountRequest accountBlockCountRequest) throws ApiException {
        ApiResponse<AccountBlockCountResponse> localVarResp = accountBlockCountWithHttpInfo(accountBlockCountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get number of blocks for a specific account
     * @param accountBlockCountRequest  (optional)
     * @return ApiResponse&lt;AccountBlockCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountBlockCountResponse> accountBlockCountWithHttpInfo(AccountBlockCountRequest accountBlockCountRequest) throws ApiException {
        okhttp3.Call localVarCall = accountBlockCountValidateBeforeCall(accountBlockCountRequest, null);
        Type localVarReturnType = new TypeToken<AccountBlockCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get number of blocks for a specific account
     * @param accountBlockCountRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountBlockCountAsync(AccountBlockCountRequest accountBlockCountRequest, final ApiCallback<AccountBlockCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountBlockCountValidateBeforeCall(accountBlockCountRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountBlockCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGet
     * @param accountGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account for a public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetCall(AccountGetRequest accountGetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountGetRequest;

        // create path and map variables
        String localVarPath = "/#account_get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetValidateBeforeCall(AccountGetRequest accountGetRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountGetCall(accountGetRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get account for the public key
     * @param accountGetRequest  (optional)
     * @return AccountGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account for a public key </td><td>  -  </td></tr>
     </table>
     */
    public AccountGetResponse accountGet(AccountGetRequest accountGetRequest) throws ApiException {
        ApiResponse<AccountGetResponse> localVarResp = accountGetWithHttpInfo(accountGetRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get account for the public key
     * @param accountGetRequest  (optional)
     * @return ApiResponse&lt;AccountGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account for a public key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountGetResponse> accountGetWithHttpInfo(AccountGetRequest accountGetRequest) throws ApiException {
        okhttp3.Call localVarCall = accountGetValidateBeforeCall(accountGetRequest, null);
        Type localVarReturnType = new TypeToken<AccountGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get account for the public key
     * @param accountGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account for a public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetAsync(AccountGetRequest accountGetRequest, final ApiCallback<AccountGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetValidateBeforeCall(accountGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountHistory
     * @param accountHistoryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account history </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountHistoryCall(AccountHistoryRequest accountHistoryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountHistoryRequest;

        // create path and map variables
        String localVarPath = "/#account_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountHistoryValidateBeforeCall(AccountHistoryRequest accountHistoryRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountHistoryCall(accountHistoryRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the account history. Reports send/receive information for an account. 
     * @param accountHistoryRequest  (optional)
     * @return AccountHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account history </td><td>  -  </td></tr>
     </table>
     */
    public AccountHistoryResponse accountHistory(AccountHistoryRequest accountHistoryRequest) throws ApiException {
        ApiResponse<AccountHistoryResponse> localVarResp = accountHistoryWithHttpInfo(accountHistoryRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the account history. Reports send/receive information for an account. 
     * @param accountHistoryRequest  (optional)
     * @return ApiResponse&lt;AccountHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account history </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountHistoryResponse> accountHistoryWithHttpInfo(AccountHistoryRequest accountHistoryRequest) throws ApiException {
        okhttp3.Call localVarCall = accountHistoryValidateBeforeCall(accountHistoryRequest, null);
        Type localVarReturnType = new TypeToken<AccountHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the account history. Reports send/receive information for an account. 
     * @param accountHistoryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account history </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountHistoryAsync(AccountHistoryRequest accountHistoryRequest, final ApiCallback<AccountHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountHistoryValidateBeforeCall(accountHistoryRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountInfo
     * @param accountInfoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountInfoCall(AccountInfoRequest accountInfoRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountInfoRequest;

        // create path and map variables
        String localVarPath = "/#account_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountInfoValidateBeforeCall(AccountInfoRequest accountInfoRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountInfoCall(accountInfoRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database &amp; block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise. 
     * @param accountInfoRequest  (optional)
     * @return AccountInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account information </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoResponse accountInfo(AccountInfoRequest accountInfoRequest) throws ApiException {
        ApiResponse<AccountInfoResponse> localVarResp = accountInfoWithHttpInfo(accountInfoRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database &amp; block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise. 
     * @param accountInfoRequest  (optional)
     * @return ApiResponse&lt;AccountInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoResponse> accountInfoWithHttpInfo(AccountInfoRequest accountInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = accountInfoValidateBeforeCall(accountInfoRequest, null);
        Type localVarReturnType = new TypeToken<AccountInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database &amp; block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise. 
     * @param accountInfoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the account information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountInfoAsync(AccountInfoRequest accountInfoRequest, final ApiCallback<AccountInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountInfoValidateBeforeCall(accountInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountKey
     * @param accountKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountKeyCall(AccountKeyRequest accountKeyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountKeyRequest;

        // create path and map variables
        String localVarPath = "/#account_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountKeyValidateBeforeCall(AccountKeyRequest accountKeyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountKeyCall(accountKeyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the public key for **account** 
     * @param accountKeyRequest  (optional)
     * @return AccountKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public AccountKeyResponse accountKey(AccountKeyRequest accountKeyRequest) throws ApiException {
        ApiResponse<AccountKeyResponse> localVarResp = accountKeyWithHttpInfo(accountKeyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the public key for **account** 
     * @param accountKeyRequest  (optional)
     * @return ApiResponse&lt;AccountKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountKeyResponse> accountKeyWithHttpInfo(AccountKeyRequest accountKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = accountKeyValidateBeforeCall(accountKeyRequest, null);
        Type localVarReturnType = new TypeToken<AccountKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the public key for **account** 
     * @param accountKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountKeyAsync(AccountKeyRequest accountKeyRequest, final ApiCallback<AccountKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountKeyValidateBeforeCall(accountKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountRepresentative
     * @param accountRepresentativeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountRepresentativeCall(AccountRepresentativeRequest accountRepresentativeRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountRepresentativeRequest;

        // create path and map variables
        String localVarPath = "/#account_representative";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountRepresentativeValidateBeforeCall(AccountRepresentativeRequest accountRepresentativeRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountRepresentativeCall(accountRepresentativeRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the representative for **account** 
     * @param accountRepresentativeRequest  (optional)
     * @return AccountRepresentativeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public AccountRepresentativeResponse accountRepresentative(AccountRepresentativeRequest accountRepresentativeRequest) throws ApiException {
        ApiResponse<AccountRepresentativeResponse> localVarResp = accountRepresentativeWithHttpInfo(accountRepresentativeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the representative for **account** 
     * @param accountRepresentativeRequest  (optional)
     * @return ApiResponse&lt;AccountRepresentativeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountRepresentativeResponse> accountRepresentativeWithHttpInfo(AccountRepresentativeRequest accountRepresentativeRequest) throws ApiException {
        okhttp3.Call localVarCall = accountRepresentativeValidateBeforeCall(accountRepresentativeRequest, null);
        Type localVarReturnType = new TypeToken<AccountRepresentativeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the representative for **account** 
     * @param accountRepresentativeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountRepresentativeAsync(AccountRepresentativeRequest accountRepresentativeRequest, final ApiCallback<AccountRepresentativeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountRepresentativeValidateBeforeCall(accountRepresentativeRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountRepresentativeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountWeight
     * @param accountWeightRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> voting weight in raw </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountWeightCall(AccountWeightRequest accountWeightRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountWeightRequest;

        // create path and map variables
        String localVarPath = "/#account_weight";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountWeightValidateBeforeCall(AccountWeightRequest accountWeightRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountWeightCall(accountWeightRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the voting weight for **account** 
     * @param accountWeightRequest  (optional)
     * @return AccountWeightResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> voting weight in raw </td><td>  -  </td></tr>
     </table>
     */
    public AccountWeightResponse accountWeight(AccountWeightRequest accountWeightRequest) throws ApiException {
        ApiResponse<AccountWeightResponse> localVarResp = accountWeightWithHttpInfo(accountWeightRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the voting weight for **account** 
     * @param accountWeightRequest  (optional)
     * @return ApiResponse&lt;AccountWeightResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> voting weight in raw </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountWeightResponse> accountWeightWithHttpInfo(AccountWeightRequest accountWeightRequest) throws ApiException {
        okhttp3.Call localVarCall = accountWeightValidateBeforeCall(accountWeightRequest, null);
        Type localVarReturnType = new TypeToken<AccountWeightResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the voting weight for **account** 
     * @param accountWeightRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> voting weight in raw </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountWeightAsync(AccountWeightRequest accountWeightRequest, final ApiCallback<AccountWeightResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountWeightValidateBeforeCall(accountWeightRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountWeightResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsBalances
     * @param accountsBalancesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> balance and pending for each account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsBalancesCall(AccountsBalancesRequest accountsBalancesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountsBalancesRequest;

        // create path and map variables
        String localVarPath = "/#accounts_balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsBalancesValidateBeforeCall(AccountsBalancesRequest accountsBalancesRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountsBalancesCall(accountsBalancesRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns how many RAW is owned and how many have not yet been received by **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     * @param accountsBalancesRequest  (optional)
     * @return AccountsBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> balance and pending for each account </td><td>  -  </td></tr>
     </table>
     */
    public AccountsBalancesResponse accountsBalances(AccountsBalancesRequest accountsBalancesRequest) throws ApiException {
        ApiResponse<AccountsBalancesResponse> localVarResp = accountsBalancesWithHttpInfo(accountsBalancesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns how many RAW is owned and how many have not yet been received by **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     * @param accountsBalancesRequest  (optional)
     * @return ApiResponse&lt;AccountsBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> balance and pending for each account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsBalancesResponse> accountsBalancesWithHttpInfo(AccountsBalancesRequest accountsBalancesRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsBalancesValidateBeforeCall(accountsBalancesRequest, null);
        Type localVarReturnType = new TypeToken<AccountsBalancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns how many RAW is owned and how many have not yet been received by **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network. 
     * @param accountsBalancesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> balance and pending for each account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsBalancesAsync(AccountsBalancesRequest accountsBalancesRequest, final ApiCallback<AccountsBalancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsBalancesValidateBeforeCall(accountsBalancesRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsBalancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsPending
     * @param accountsPendingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPendingCall(AccountsPendingRequest accountsPendingRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountsPendingRequest;

        // create path and map variables
        String localVarPath = "/#accounts_pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsPendingValidateBeforeCall(AccountsPendingRequest accountsPendingRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountsPendingCall(accountsPendingRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a list of block hashes which have not yet been received by these accounts
     * @param accountsPendingRequest  (optional)
     * @return AccountsPendingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public AccountsPendingResponse accountsPending(AccountsPendingRequest accountsPendingRequest) throws ApiException {
        ApiResponse<AccountsPendingResponse> localVarResp = accountsPendingWithHttpInfo(accountsPendingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of block hashes which have not yet been received by these accounts
     * @param accountsPendingRequest  (optional)
     * @return ApiResponse&lt;AccountsPendingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsPendingResponse> accountsPendingWithHttpInfo(AccountsPendingRequest accountsPendingRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsPendingValidateBeforeCall(accountsPendingRequest, null);
        Type localVarReturnType = new TypeToken<AccountsPendingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of block hashes which have not yet been received by these accounts
     * @param accountsPendingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsPendingAsync(AccountsPendingRequest accountsPendingRequest, final ApiCallback<AccountsPendingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsPendingValidateBeforeCall(accountsPendingRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsPendingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activeDifficulty
     * @param activeDifficultyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activeDifficultyCall(ActiveDifficultyRequest activeDifficultyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = activeDifficultyRequest;

        // create path and map variables
        String localVarPath = "/#active_difficulty";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activeDifficultyValidateBeforeCall(ActiveDifficultyRequest activeDifficultyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = activeDifficultyCall(activeDifficultyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the difficulty values (16 hexadecimal digits string, 64 bit) for the minimum required on the network (network_minimum) as well as the current active difficulty seen on the network (network_current, 5 minute trended average of adjusted difficulty seen on confirmed transactions) which can be used to perform rework for better prioritization of transaction processing. A multiplier of the network_current from the base difficulty of network_minimum is also provided for comparison. 
     * @param activeDifficultyRequest  (optional)
     * @return ActiveDifficultyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public ActiveDifficultyResponse activeDifficulty(ActiveDifficultyRequest activeDifficultyRequest) throws ApiException {
        ApiResponse<ActiveDifficultyResponse> localVarResp = activeDifficultyWithHttpInfo(activeDifficultyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the difficulty values (16 hexadecimal digits string, 64 bit) for the minimum required on the network (network_minimum) as well as the current active difficulty seen on the network (network_current, 5 minute trended average of adjusted difficulty seen on confirmed transactions) which can be used to perform rework for better prioritization of transaction processing. A multiplier of the network_current from the base difficulty of network_minimum is also provided for comparison. 
     * @param activeDifficultyRequest  (optional)
     * @return ApiResponse&lt;ActiveDifficultyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveDifficultyResponse> activeDifficultyWithHttpInfo(ActiveDifficultyRequest activeDifficultyRequest) throws ApiException {
        okhttp3.Call localVarCall = activeDifficultyValidateBeforeCall(activeDifficultyRequest, null);
        Type localVarReturnType = new TypeToken<ActiveDifficultyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the difficulty values (16 hexadecimal digits string, 64 bit) for the minimum required on the network (network_minimum) as well as the current active difficulty seen on the network (network_current, 5 minute trended average of adjusted difficulty seen on confirmed transactions) which can be used to perform rework for better prioritization of transaction processing. A multiplier of the network_current from the base difficulty of network_minimum is also provided for comparison. 
     * @param activeDifficultyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block hashes which have not yet been received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activeDifficultyAsync(ActiveDifficultyRequest activeDifficultyRequest, final ApiCallback<ActiveDifficultyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activeDifficultyValidateBeforeCall(activeDifficultyRequest, _callback);
        Type localVarReturnType = new TypeToken<ActiveDifficultyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for availableSupply
     * @param availableSupplyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available supply in RAW </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availableSupplyCall(AvailableSupplyRequest availableSupplyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = availableSupplyRequest;

        // create path and map variables
        String localVarPath = "/#available_supply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call availableSupplyValidateBeforeCall(AvailableSupplyRequest availableSupplyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = availableSupplyCall(availableSupplyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns how many raw are in the public supply 
     * @param availableSupplyRequest  (optional)
     * @return AvailableSupplyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available supply in RAW </td><td>  -  </td></tr>
     </table>
     */
    public AvailableSupplyResponse availableSupply(AvailableSupplyRequest availableSupplyRequest) throws ApiException {
        ApiResponse<AvailableSupplyResponse> localVarResp = availableSupplyWithHttpInfo(availableSupplyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns how many raw are in the public supply 
     * @param availableSupplyRequest  (optional)
     * @return ApiResponse&lt;AvailableSupplyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available supply in RAW </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AvailableSupplyResponse> availableSupplyWithHttpInfo(AvailableSupplyRequest availableSupplyRequest) throws ApiException {
        okhttp3.Call localVarCall = availableSupplyValidateBeforeCall(availableSupplyRequest, null);
        Type localVarReturnType = new TypeToken<AvailableSupplyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns how many raw are in the public supply 
     * @param availableSupplyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available supply in RAW </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availableSupplyAsync(AvailableSupplyRequest availableSupplyRequest, final ApiCallback<AvailableSupplyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = availableSupplyValidateBeforeCall(availableSupplyRequest, _callback);
        Type localVarReturnType = new TypeToken<AvailableSupplyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockAccount
     * @param blockAccountRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockAccountCall(BlockAccountRequest blockAccountRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockAccountRequest;

        // create path and map variables
        String localVarPath = "/#block_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockAccountValidateBeforeCall(BlockAccountRequest blockAccountRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockAccountCall(blockAccountRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the account containing block 
     * @param blockAccountRequest  (optional)
     * @return BlockAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public BlockAccountResponse blockAccount(BlockAccountRequest blockAccountRequest) throws ApiException {
        ApiResponse<BlockAccountResponse> localVarResp = blockAccountWithHttpInfo(blockAccountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the account containing block 
     * @param blockAccountRequest  (optional)
     * @return ApiResponse&lt;BlockAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockAccountResponse> blockAccountWithHttpInfo(BlockAccountRequest blockAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = blockAccountValidateBeforeCall(blockAccountRequest, null);
        Type localVarReturnType = new TypeToken<BlockAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the account containing block 
     * @param blockAccountRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockAccountAsync(BlockAccountRequest blockAccountRequest, final ApiCallback<BlockAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockAccountValidateBeforeCall(blockAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockConfirm
     * @param blockConfirmRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockConfirmCall(BlockConfirmRequest blockConfirmRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockConfirmRequest;

        // create path and map variables
        String localVarPath = "/#block_confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockConfirmValidateBeforeCall(BlockConfirmRequest blockConfirmRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockConfirmCall(blockConfirmRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Request confirmation for **block** from known online representative nodes. Check results with confirmation history. 
     * @param blockConfirmRequest  (optional)
     * @return BlockConfirmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public BlockConfirmResponse blockConfirm(BlockConfirmRequest blockConfirmRequest) throws ApiException {
        ApiResponse<BlockConfirmResponse> localVarResp = blockConfirmWithHttpInfo(blockConfirmRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Request confirmation for **block** from known online representative nodes. Check results with confirmation history. 
     * @param blockConfirmRequest  (optional)
     * @return ApiResponse&lt;BlockConfirmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockConfirmResponse> blockConfirmWithHttpInfo(BlockConfirmRequest blockConfirmRequest) throws ApiException {
        okhttp3.Call localVarCall = blockConfirmValidateBeforeCall(blockConfirmRequest, null);
        Type localVarReturnType = new TypeToken<BlockConfirmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request confirmation for **block** from known online representative nodes. Check results with confirmation history. 
     * @param blockConfirmRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The account containing block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockConfirmAsync(BlockConfirmRequest blockConfirmRequest, final ApiCallback<BlockConfirmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockConfirmValidateBeforeCall(blockConfirmRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockConfirmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockCount
     * @param blockCountRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count and unchecked blocks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCountCall(BlockCountRequest blockCountRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockCountRequest;

        // create path and map variables
        String localVarPath = "/#block_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockCountValidateBeforeCall(BlockCountRequest blockCountRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockCountCall(blockCountRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Reports the number of blocks in the ledger and unchecked synchronizing blocks. 
     * @param blockCountRequest  (optional)
     * @return BlockCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count and unchecked blocks. </td><td>  -  </td></tr>
     </table>
     */
    public BlockCountResponse blockCount(BlockCountRequest blockCountRequest) throws ApiException {
        ApiResponse<BlockCountResponse> localVarResp = blockCountWithHttpInfo(blockCountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reports the number of blocks in the ledger and unchecked synchronizing blocks. 
     * @param blockCountRequest  (optional)
     * @return ApiResponse&lt;BlockCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count and unchecked blocks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockCountResponse> blockCountWithHttpInfo(BlockCountRequest blockCountRequest) throws ApiException {
        okhttp3.Call localVarCall = blockCountValidateBeforeCall(blockCountRequest, null);
        Type localVarReturnType = new TypeToken<BlockCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reports the number of blocks in the ledger and unchecked synchronizing blocks. 
     * @param blockCountRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The count and unchecked blocks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCountAsync(BlockCountRequest blockCountRequest, final ApiCallback<BlockCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockCountValidateBeforeCall(blockCountRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockCountType
     * @param blockCountTypeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks in the ledger. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCountTypeCall(BlockCountTypeRequest blockCountTypeRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockCountTypeRequest;

        // create path and map variables
        String localVarPath = "/#block_count_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockCountTypeValidateBeforeCall(BlockCountTypeRequest blockCountTypeRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockCountTypeCall(blockCountTypeRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Reports the number of blocks in the ledger by type (send, receive, open, change, state with version) 
     * @param blockCountTypeRequest  (optional)
     * @return BlockCountTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks in the ledger. </td><td>  -  </td></tr>
     </table>
     */
    public BlockCountTypeResponse blockCountType(BlockCountTypeRequest blockCountTypeRequest) throws ApiException {
        ApiResponse<BlockCountTypeResponse> localVarResp = blockCountTypeWithHttpInfo(blockCountTypeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reports the number of blocks in the ledger by type (send, receive, open, change, state with version) 
     * @param blockCountTypeRequest  (optional)
     * @return ApiResponse&lt;BlockCountTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks in the ledger. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockCountTypeResponse> blockCountTypeWithHttpInfo(BlockCountTypeRequest blockCountTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = blockCountTypeValidateBeforeCall(blockCountTypeRequest, null);
        Type localVarReturnType = new TypeToken<BlockCountTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reports the number of blocks in the ledger by type (send, receive, open, change, state with version) 
     * @param blockCountTypeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The number of blocks in the ledger. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCountTypeAsync(BlockCountTypeRequest blockCountTypeRequest, final ApiCallback<BlockCountTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockCountTypeValidateBeforeCall(blockCountTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockCountTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockCreate
     * @param blockCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response of a state block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCreateCall(BlockCreateRequest blockCreateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockCreateRequest;

        // create path and map variables
        String localVarPath = "/#block_create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockCreateValidateBeforeCall(BlockCreateRequest blockCreateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockCreateCall(blockCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a json representations of new block based on input data &amp; signed with **private key** or **account** in **wallet**. Use for offline signing. 
     * @param blockCreateRequest  (optional)
     * @return BlockCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response of a state block </td><td>  -  </td></tr>
     </table>
     */
    public BlockCreateResponse blockCreate(BlockCreateRequest blockCreateRequest) throws ApiException {
        ApiResponse<BlockCreateResponse> localVarResp = blockCreateWithHttpInfo(blockCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a json representations of new block based on input data &amp; signed with **private key** or **account** in **wallet**. Use for offline signing. 
     * @param blockCreateRequest  (optional)
     * @return ApiResponse&lt;BlockCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response of a state block </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockCreateResponse> blockCreateWithHttpInfo(BlockCreateRequest blockCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = blockCreateValidateBeforeCall(blockCreateRequest, null);
        Type localVarReturnType = new TypeToken<BlockCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a json representations of new block based on input data &amp; signed with **private key** or **account** in **wallet**. Use for offline signing. 
     * @param blockCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response of a state block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCreateAsync(BlockCreateRequest blockCreateRequest, final ApiCallback<BlockCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockCreateValidateBeforeCall(blockCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<BlockCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocks
     * @param blocksRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The json representation, keyd on block hash. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksCall(BlocksRequest blocksRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blocksRequest;

        // create path and map variables
        String localVarPath = "/#blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksValidateBeforeCall(BlocksRequest blocksRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blocksCall(blocksRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a json representations of **blocks**. 
     * @param blocksRequest  (optional)
     * @return BlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The json representation, keyd on block hash. </td><td>  -  </td></tr>
     </table>
     */
    public BlocksResponse blocks(BlocksRequest blocksRequest) throws ApiException {
        ApiResponse<BlocksResponse> localVarResp = blocksWithHttpInfo(blocksRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a json representations of **blocks**. 
     * @param blocksRequest  (optional)
     * @return ApiResponse&lt;BlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The json representation, keyd on block hash. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlocksResponse> blocksWithHttpInfo(BlocksRequest blocksRequest) throws ApiException {
        okhttp3.Call localVarCall = blocksValidateBeforeCall(blocksRequest, null);
        Type localVarReturnType = new TypeToken<BlocksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a json representations of **blocks**. 
     * @param blocksRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The json representation, keyd on block hash. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksAsync(BlocksRequest blocksRequest, final ApiCallback<BlocksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksValidateBeforeCall(blocksRequest, _callback);
        Type localVarReturnType = new TypeToken<BlocksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksInfo
     * @param blocksInfoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blocks info response, keyed on the block hash. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksInfoCall(BlocksInfoRequest blocksInfoRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blocksInfoRequest;

        // create path and map variables
        String localVarPath = "/#blocks_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksInfoValidateBeforeCall(BlocksInfoRequest blocksInfoRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blocksInfoCall(blocksInfoRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a json representations of blocks in contents along with:  * _since version 18.0_: &#x60;block_account&#x60;, transaction &#x60;amount&#x60;, block &#x60;balance&#x60;, block &#x60;height&#x60; in account chain, block local modification  timestamp * _since version 19.0_: Whether block was &#x60;confirmed&#x60;, &#x60;subtype&#x60; (for state blocks) of &#x60;send&#x60;, &#x60;receive&#x60;, &#x60;change&#x60; or &#x60;epoch&#x60; 
     * @param blocksInfoRequest  (optional)
     * @return BlocksInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blocks info response, keyed on the block hash. </td><td>  -  </td></tr>
     </table>
     */
    public BlocksInfoResponse blocksInfo(BlocksInfoRequest blocksInfoRequest) throws ApiException {
        ApiResponse<BlocksInfoResponse> localVarResp = blocksInfoWithHttpInfo(blocksInfoRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a json representations of blocks in contents along with:  * _since version 18.0_: &#x60;block_account&#x60;, transaction &#x60;amount&#x60;, block &#x60;balance&#x60;, block &#x60;height&#x60; in account chain, block local modification  timestamp * _since version 19.0_: Whether block was &#x60;confirmed&#x60;, &#x60;subtype&#x60; (for state blocks) of &#x60;send&#x60;, &#x60;receive&#x60;, &#x60;change&#x60; or &#x60;epoch&#x60; 
     * @param blocksInfoRequest  (optional)
     * @return ApiResponse&lt;BlocksInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blocks info response, keyed on the block hash. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlocksInfoResponse> blocksInfoWithHttpInfo(BlocksInfoRequest blocksInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = blocksInfoValidateBeforeCall(blocksInfoRequest, null);
        Type localVarReturnType = new TypeToken<BlocksInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a json representations of blocks in contents along with:  * _since version 18.0_: &#x60;block_account&#x60;, transaction &#x60;amount&#x60;, block &#x60;balance&#x60;, block &#x60;height&#x60; in account chain, block local modification  timestamp * _since version 19.0_: Whether block was &#x60;confirmed&#x60;, &#x60;subtype&#x60; (for state blocks) of &#x60;send&#x60;, &#x60;receive&#x60;, &#x60;change&#x60; or &#x60;epoch&#x60; 
     * @param blocksInfoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Blocks info response, keyed on the block hash. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocksInfoAsync(BlocksInfoRequest blocksInfoRequest, final ApiCallback<BlocksInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksInfoValidateBeforeCall(blocksInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<BlocksInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyCreate
     * @param keyCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> created key pair </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyCreateCall(KeyCreateRequest keyCreateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = keyCreateRequest;

        // create path and map variables
        String localVarPath = "/#key_create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyCreateValidateBeforeCall(KeyCreateRequest keyCreateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = keyCreateCall(keyCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Generates an **adhoc random** keypair 
     * @param keyCreateRequest  (optional)
     * @return KeyCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> created key pair </td><td>  -  </td></tr>
     </table>
     */
    public KeyCreateResponse keyCreate(KeyCreateRequest keyCreateRequest) throws ApiException {
        ApiResponse<KeyCreateResponse> localVarResp = keyCreateWithHttpInfo(keyCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates an **adhoc random** keypair 
     * @param keyCreateRequest  (optional)
     * @return ApiResponse&lt;KeyCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> created key pair </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyCreateResponse> keyCreateWithHttpInfo(KeyCreateRequest keyCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = keyCreateValidateBeforeCall(keyCreateRequest, null);
        Type localVarReturnType = new TypeToken<KeyCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates an **adhoc random** keypair 
     * @param keyCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> created key pair </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyCreateAsync(KeyCreateRequest keyCreateRequest, final ApiCallback<KeyCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyCreateValidateBeforeCall(keyCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyExpand
     * @param keyExpandRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key and an account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyExpandCall(KeyExpandRequest keyExpandRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = keyExpandRequest;

        // create path and map variables
        String localVarPath = "/#key_expand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyExpandValidateBeforeCall(KeyExpandRequest keyExpandRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = keyExpandCall(keyExpandRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Derive public key and account number from **private key** 
     * @param keyExpandRequest  (optional)
     * @return KeyExpandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key and an account </td><td>  -  </td></tr>
     </table>
     */
    public KeyExpandResponse keyExpand(KeyExpandRequest keyExpandRequest) throws ApiException {
        ApiResponse<KeyExpandResponse> localVarResp = keyExpandWithHttpInfo(keyExpandRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Derive public key and account number from **private key** 
     * @param keyExpandRequest  (optional)
     * @return ApiResponse&lt;KeyExpandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key and an account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyExpandResponse> keyExpandWithHttpInfo(KeyExpandRequest keyExpandRequest) throws ApiException {
        okhttp3.Call localVarCall = keyExpandValidateBeforeCall(keyExpandRequest, null);
        Type localVarReturnType = new TypeToken<KeyExpandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Derive public key and account number from **private key** 
     * @param keyExpandRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the public key and an account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyExpandAsync(KeyExpandRequest keyExpandRequest, final ApiCallback<KeyExpandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyExpandValidateBeforeCall(keyExpandRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyExpandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for process
     * @param processRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hash of the processed block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processCall(ProcessRequest processRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = processRequest;

        // create path and map variables
        String localVarPath = "/#process";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processValidateBeforeCall(ProcessRequest processRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = processCall(processRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Publish block to the network
     * @param processRequest  (optional)
     * @return ProcessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hash of the processed block </td><td>  -  </td></tr>
     </table>
     */
    public ProcessResponse process(ProcessRequest processRequest) throws ApiException {
        ApiResponse<ProcessResponse> localVarResp = processWithHttpInfo(processRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Publish block to the network
     * @param processRequest  (optional)
     * @return ApiResponse&lt;ProcessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hash of the processed block </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessResponse> processWithHttpInfo(ProcessRequest processRequest) throws ApiException {
        okhttp3.Call localVarCall = processValidateBeforeCall(processRequest, null);
        Type localVarReturnType = new TypeToken<ProcessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Publish block to the network
     * @param processRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hash of the processed block </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processAsync(ProcessRequest processRequest, final ApiCallback<ProcessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processValidateBeforeCall(processRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workGenerate
     * @param workGenerateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resulting work hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workGenerateCall(WorkGenerateRequest workGenerateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = workGenerateRequest;

        // create path and map variables
        String localVarPath = "/#work_generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workGenerateValidateBeforeCall(WorkGenerateRequest workGenerateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = workGenerateCall(workGenerateRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key 
     * @param workGenerateRequest  (optional)
     * @return WorkGenerateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resulting work hash </td><td>  -  </td></tr>
     </table>
     */
    public WorkGenerateResponse workGenerate(WorkGenerateRequest workGenerateRequest) throws ApiException {
        ApiResponse<WorkGenerateResponse> localVarResp = workGenerateWithHttpInfo(workGenerateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key 
     * @param workGenerateRequest  (optional)
     * @return ApiResponse&lt;WorkGenerateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resulting work hash </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkGenerateResponse> workGenerateWithHttpInfo(WorkGenerateRequest workGenerateRequest) throws ApiException {
        okhttp3.Call localVarCall = workGenerateValidateBeforeCall(workGenerateRequest, null);
        Type localVarReturnType = new TypeToken<WorkGenerateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key 
     * @param workGenerateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resulting work hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workGenerateAsync(WorkGenerateRequest workGenerateRequest, final ApiCallback<WorkGenerateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workGenerateValidateBeforeCall(workGenerateRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkGenerateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
