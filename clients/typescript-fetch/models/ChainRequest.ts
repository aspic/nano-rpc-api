/* tslint:disable */
/* eslint-disable */
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ModelBoolean,
    ModelBooleanFromJSON,
    ModelBooleanFromJSONTyped,
    ModelBooleanToJSON,
} from './';

/**
 * 
 * @export
 * @interface ChainRequest
 */
export interface ChainRequest {
    /**
     * 
     * @type {string}
     * @memberof ChainRequest
     */
    action: ChainRequestActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ChainRequest
     */
    block: string;
    /**
     * 
     * @type {string}
     * @memberof ChainRequest
     */
    count: string;
    /**
     * _version 18.0+_
     * 
     * Number, 0 by default. Return the account chain block hashes offset by the specified number of blocks
     * @type {string}
     * @memberof ChainRequest
     */
    offset?: string;
    /**
     * _version 18.0+_
     * 
     * Boolean, false by default. Returns a list of block hashes in the account chain starting at block up to count (direction from open block up
     * to frontier, from older blocks to newer). Equal to [successors](https://docs.nano.org/commands/rpc-protocol/#successors)
     * @type {ModelBoolean}
     * @memberof ChainRequest
     */
    reverse?: ModelBoolean;
}

export function ChainRequestFromJSON(json: any): ChainRequest {
    return ChainRequestFromJSONTyped(json, false);
}

export function ChainRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChainRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'block': json['block'],
        'count': json['count'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'reverse': !exists(json, 'reverse') ? undefined : ModelBooleanFromJSON(json['reverse']),
    };
}

export function ChainRequestToJSON(value?: ChainRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'block': value.block,
        'count': value.count,
        'offset': value.offset,
        'reverse': ModelBooleanToJSON(value.reverse),
    };
}

/**
* @export
* @enum {string}
*/
export enum ChainRequestActionEnum {
    Chain = 'chain'
}


