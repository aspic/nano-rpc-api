{
  "openapi": "3.0.0",
  "info": {
    "version": "19.0.0-alpha",
    "title": "nano-rpc-api",
    "description": "API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)\n"
  },
  "servers": [
    {
      "url": "http://localhost:7076"
    }
  ],
  "paths": {
    "/#account_balance": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "account_balance",
        "summary": "Returns RAW amount owned and not received",
        "description": "Returns how many RAW is owned and how many have not yet been received by account\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns balance and pending",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#account_block_count": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "account_block_count",
        "summary": "Get number of blocks for a specific account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountBlockCountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The number of blocks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBlockCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#account_get": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "account_get",
        "summary": "Get account for the public key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the account for a public key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGetResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#account_history": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "account_history",
        "summary": "Gets account history",
        "description": "Reports send/receive information for an account.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the account history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#account_info": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "account_info",
        "summary": "Gets account information",
        "description": "Returns frontier, open block, change representative block, balance, last modified timestamp from local database &\nblock count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not\nfound_ otherwise.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#accounts_pending": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "accounts_pending",
        "summary": "Returns a list of block hashes which have not yet been received by these accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountsPendingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Block hashes which have not yet been received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsPendingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#work_generate": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "work_generate",
        "summary": "Generates work for blocks",
        "description": "Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkGenerateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resulting work hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkGenerateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#block_create": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "block_create",
        "summary": "Creates state blocks",
        "description": "Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response of a state block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#process": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "process",
        "summary": "Publish block to the network",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hash of the processed block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#key_create": {
      "post": {
        "tags": [
          "Node RPCs"
        ],
        "operationId": "key_create",
        "summary": "Creates key pair",
        "description": "Generates an **adhoc random** keypair\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "created key pair",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#create": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "walletCreate",
        "summary": "Creates a new random wallet id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created wallet id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#accounts_create": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "accounts_create",
        "summary": "Creates new accounts, insert next deterministic keys in wallet up to count",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountsCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a list of the created accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/#receive": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "receive",
        "summary": "Receive pending block for account in wallet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the eventually received block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiveResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountBalanceRequest": {
        "type": "object",
        "required": [
          "action",
          "account"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "account_balance"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "AccountBlockCountRequest": {
        "type": "object",
        "required": [
          "action",
          "account"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "account_block_count"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "AccountGetRequest": {
        "type": "object",
        "required": [
          "action",
          "key"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "account_get"
            ]
          },
          "key": {
            "$ref": "#/components/schemas/PublicKey"
          }
        }
      },
      "AccountHistoryRequest": {
        "type": "object",
        "required": [
          "action",
          "key"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "account_history"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          },
          "count": {
            "$ref": "#/components/schemas/BlockCount"
          }
        }
      },
      "AccountInfoRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "account_info"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "AccountsPendingRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "accounts_pending"
            ]
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NanoAddress"
            }
          },
          "count": {
            "$ref": "#/components/schemas/BlockCount"
          },
          "include_active": {
            "type": "boolean"
          },
          "source": {
            "type": "boolean"
          }
        }
      },
      "WorkGenerateRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "work_generate"
            ]
          },
          "hash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "difficulty": {
            "$ref": "#/components/schemas/WorkDifficulty"
          }
        }
      },
      "BlockCreateRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "block_create"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "state"
            ]
          },
          "balance": {
            "$ref": "#/components/schemas/Raw"
          },
          "key": {
            "$ref": "#/components/schemas/PrivateKey"
          },
          "representative": {
            "$ref": "#/components/schemas/NanoAddress"
          },
          "link": {
            "type": "string"
          },
          "work": {
            "$ref": "#/components/schemas/Work"
          },
          "previous": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "wallet": {
            "$ref": "#/components/schemas/Wallet"
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "ProcessRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "process"
            ]
          },
          "block": {
            "$ref": "#/components/schemas/BlockData"
          }
        }
      },
      "KeyCreateRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "key_create"
            ]
          }
        }
      },
      "WalletCreateRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "wallet_create"
            ]
          }
        }
      },
      "AccountsCreateRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "accounts_create"
            ]
          },
          "wallet": {
            "$ref": "#/components/schemas/Wallet"
          },
          "count": {
            "$ref": "#/components/schemas/AccountCount"
          }
        }
      },
      "ReceiveRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "receive"
            ]
          },
          "wallet": {
            "$ref": "#/components/schemas/Wallet"
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          },
          "block": {
            "$ref": "#/components/schemas/BlockHash"
          }
        }
      },
      "AccountBalanceResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Raw"
          },
          "pending": {
            "$ref": "#/components/schemas/Raw"
          }
        }
      },
      "AccountBlockCountResponse": {
        "type": "object",
        "properties": {
          "block_count": {
            "type": "string"
          }
        }
      },
      "AccountGetResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "AccountHistoryResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Block"
            }
          },
          "previous": {
            "$ref": "#/components/schemas/BlockHash"
          }
        }
      },
      "AccountInfoResponse": {
        "type": "object",
        "properties": {
          "frontier": {
            "type": "string"
          },
          "open_block": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "representative_block": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "balance": {
            "$ref": "#/components/schemas/Raw"
          },
          "modified_timestamp": {
            "$ref": "#/components/schemas/LocalTimestamp"
          },
          "block_count": {
            "$ref": "#/components/schemas/BlockCount"
          },
          "confirmation_height": {
            "$ref": "#/components/schemas/ConfirmationHeight"
          },
          "account_version": {
            "$ref": "#/components/schemas/AccountVersion"
          }
        }
      },
      "AccountsPendingResponse": {
        "type": "object",
        "properties": {
          "blocks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AccountPending"
            },
            "example": {
              "nano_1111111111111111111111111111111111111111111111111117353trpda": {
                "142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D": {
                  "amount": "6000000000000000000000000000000",
                  "source": "nano_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr"
                }
              }
            }
          }
        }
      },
      "WorkGenerateResponse": {
        "type": "object",
        "properties": {
          "work": {
            "$ref": "#/components/schemas/Work"
          },
          "difficulty": {
            "$ref": "#/components/schemas/WorkDifficulty"
          },
          "multiplier": {
            "$ref": "#/components/schemas/WorkMultiplier"
          }
        }
      },
      "BlockCreateResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "block": {
            "$ref": "#/components/schemas/BlockData"
          }
        }
      },
      "ProcessResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "$ref": "#/components/schemas/BlockHash"
          }
        }
      },
      "KeyCreateResponse": {
        "type": "object",
        "properties": {
          "private": {
            "$ref": "#/components/schemas/PrivateKey"
          },
          "public": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "WalletCreateResponse": {
        "type": "object",
        "properties": {
          "wallet": {
            "$ref": "#/components/schemas/Wallet"
          }
        }
      },
      "AccountsCreateResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NanoAddress"
            }
          }
        }
      },
      "ReceiveResponse": {
        "type": "object",
        "properties": {
          "block": {
            "$ref": "#/components/schemas/BlockHash"
          }
        }
      },
      "Wallet": {
        "type": "string",
        "example": "000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F"
      },
      "AccountCount": {
        "type": "string",
        "example": "2"
      },
      "NanoAddress": {
        "type": "string",
        "example": "nano_1hzoje373eapce4ses7xsx539suww5555hi9q8i8j7hpbayzxq4c4nn91hr8"
      },
      "AccountPending": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/PendingBlock"
        }
      },
      "PendingBlock": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "source": {
            "$ref": "#/components/schemas/NanoAddress"
          }
        }
      },
      "PublicKey": {
        "type": "string",
        "example": "3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039"
      },
      "PrivateKey": {
        "type": "string",
        "example": "3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039"
      },
      "Raw": {
        "type": "number",
        "description": "1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc.",
        "example": "1000000000000000000000000000000"
      },
      "BlockCount": {
        "type": "string",
        "example": "1"
      },
      "BlockHeight": {
        "type": "string",
        "example": "60"
      },
      "BlockData": {
        "type": "string",
        "example": "{\"type\"...}"
      },
      "BlockHash": {
        "type": "string",
        "example": "8D3AB98B301224253750D448B4BD997132400CEDD0A8432F775724F2D9821C72"
      },
      "BlockState": {
        "type": "string",
        "enum": [
          "send"
        ]
      },
      "ConfirmationHeight": {
        "type": "string",
        "example": "28"
      },
      "LocalTimestamp": {
        "type": "string",
        "example": "1551532723"
      },
      "WorkDifficulty": {
        "type": "string",
        "example": "ffffffd21c3933f3"
      },
      "Work": {
        "type": "string",
        "example": "2bf29ef00786a6bc"
      },
      "WorkMultiplier": {
        "type": "string",
        "example": "1.394647"
      },
      "AccountVersion": {
        "type": "string",
        "example": "1"
      },
      "Block": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BlockState"
          },
          "account": {
            "$ref": "#/components/schemas/NanoAddress"
          },
          "amount": {
            "$ref": "#/components/schemas/Raw"
          },
          "local_timestamp": {
            "$ref": "#/components/schemas/LocalTimestamp"
          },
          "height": {
            "$ref": "#/components/schemas/BlockHeight"
          },
          "hash": {
            "$ref": "#/components/schemas/BlockHash"
          }
        }
      }
    }
  }
}
