/* tslint:disable */
/* eslint-disable */
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ModelBoolean,
    ModelBooleanFromJSON,
    ModelBooleanFromJSONTyped,
    ModelBooleanToJSON,
} from './';

/**
 * 
 * @export
 * @interface PendingRequest
 */
export interface PendingRequest {
    /**
     * 
     * @type {string}
     * @memberof PendingRequest
     */
    action: PendingRequestActionEnum;
    /**
     * 
     * @type {string}
     * @memberof PendingRequest
     */
    account: string;
    /**
     * 
     * @type {number}
     * @memberof PendingRequest
     */
    count?: number;
    /**
     * version 19.0+
     * 
     * Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing.
     * @type {ModelBoolean}
     * @memberof PendingRequest
     */
    includeOnlyConfirmed?: ModelBoolean;
}

export function PendingRequestFromJSON(json: any): PendingRequest {
    return PendingRequestFromJSONTyped(json, false);
}

export function PendingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PendingRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'account': json['account'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'includeOnlyConfirmed': !exists(json, 'include_only_confirmed') ? undefined : ModelBooleanFromJSON(json['include_only_confirmed']),
    };
}

export function PendingRequestToJSON(value?: PendingRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'account': value.account,
        'count': value.count,
        'include_only_confirmed': ModelBooleanToJSON(value.includeOnlyConfirmed),
    };
}

/**
* @export
* @enum {string}
*/
export enum PendingRequestActionEnum {
    Pending = 'pending'
}


