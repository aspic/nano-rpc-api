// tslint:disable
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountsCreateRequest,
    AccountsCreateRequestFromJSON,
    AccountsCreateRequestToJSON,
    AccountsCreateResponse,
    AccountsCreateResponseFromJSON,
    AccountsCreateResponseToJSON,
    ReceiveRequest,
    ReceiveRequestFromJSON,
    ReceiveRequestToJSON,
    ReceiveResponse,
    ReceiveResponseFromJSON,
    ReceiveResponseToJSON,
    WalletCreateRequest,
    WalletCreateRequestFromJSON,
    WalletCreateRequestToJSON,
    WalletCreateResponse,
    WalletCreateResponseFromJSON,
    WalletCreateResponseToJSON,
} from '../models';

export interface AccountsCreateRequest {
    accountsCreateRequest?: AccountsCreateRequest;
}

export interface ReceiveRequest {
    receiveRequest?: ReceiveRequest;
}

export interface WalletCreateRequest {
    walletCreateRequest?: WalletCreateRequest;
}

/**
 * no description
 */
export class WalletApi extends runtime.BaseAPI {

    /**
     * Creates new accounts, insert next deterministic keys in wallet up to count
     */
    async accountsCreateRaw(requestParameters: AccountsCreateRequest): Promise<runtime.ApiResponse<AccountsCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#accounts_create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountsCreateRequestToJSON(requestParameters.accountsCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsCreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates new accounts, insert next deterministic keys in wallet up to count
     */
    async accountsCreate(requestParameters: AccountsCreateRequest): Promise<AccountsCreateResponse> {
        const response = await this.accountsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Receive pending block for account in wallet
     */
    async receiveRaw(requestParameters: ReceiveRequest): Promise<runtime.ApiResponse<ReceiveResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#receive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReceiveRequestToJSON(requestParameters.receiveRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReceiveResponseFromJSON(jsonValue));
    }

    /**
     * Receive pending block for account in wallet
     */
    async receive(requestParameters: ReceiveRequest): Promise<ReceiveResponse> {
        const response = await this.receiveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new random wallet id
     */
    async walletCreateRaw(requestParameters: WalletCreateRequest): Promise<runtime.ApiResponse<WalletCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#wallet_create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletCreateRequestToJSON(requestParameters.walletCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletCreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new random wallet id
     */
    async walletCreate(requestParameters: WalletCreateRequest): Promise<WalletCreateResponse> {
        const response = await this.walletCreateRaw(requestParameters);
        return await response.value();
    }

}
