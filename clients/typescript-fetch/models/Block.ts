// tslint:disable
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BlockState,
    BlockStateFromJSON,
    BlockStateToJSON,
} from './';

/**
 * 
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {BlockState}
     * @memberof Block
     */
    type?: BlockState;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    account?: string;
    /**
     * 1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc.
     * @type {number}
     * @memberof Block
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    localTimestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    height?: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    hash?: string;
}

export function BlockFromJSON(json: any): Block {
    return {
        'type': !exists(json, 'type') ? undefined : BlockStateFromJSON(json['type']),
        'account': !exists(json, 'account') ? undefined : json['account'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'localTimestamp': !exists(json, 'local_timestamp') ? undefined : json['local_timestamp'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
    };
}

export function BlockToJSON(value?: Block): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'type': BlockStateToJSON(value.type),
        'account': value.account,
        'amount': value.amount,
        'local_timestamp': value.localTimestamp,
        'height': value.height,
        'hash': value.hash,
    };
}


