/* tslint:disable */
/* eslint-disable */
/**
 * nano-rpc-api
 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol) 
 *
 * The version of the OpenAPI document: 19.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConfirmationInfo,
    ConfirmationInfoFromJSON,
    ConfirmationInfoFromJSONTyped,
    ConfirmationInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface ConfirmationInfoResponse
 */
export interface ConfirmationInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof ConfirmationInfoResponse
     */
    announcements?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmationInfoResponse
     */
    lastWinner?: string;
    /**
     * 1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc.
     * @type {number}
     * @memberof ConfirmationInfoResponse
     */
    totalTally?: number;
    /**
     * 
     * @type {{ [key: string]: ConfirmationInfo; }}
     * @memberof ConfirmationInfoResponse
     */
    blocks?: { [key: string]: ConfirmationInfo; };
}

export function ConfirmationInfoResponseFromJSON(json: any): ConfirmationInfoResponse {
    return ConfirmationInfoResponseFromJSONTyped(json, false);
}

export function ConfirmationInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfirmationInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'announcements': !exists(json, 'announcements') ? undefined : json['announcements'],
        'lastWinner': !exists(json, 'last_winner') ? undefined : json['last_winner'],
        'totalTally': !exists(json, 'total_tally') ? undefined : json['total_tally'],
        'blocks': !exists(json, 'blocks') ? undefined : (mapValues(json['blocks'], ConfirmationInfoFromJSON)),
    };
}

export function ConfirmationInfoResponseToJSON(value?: ConfirmationInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'announcements': value.announcements,
        'last_winner': value.lastWinner,
        'total_tally': value.totalTally,
        'blocks': value.blocks === undefined ? undefined : (mapValues(value.blocks, ConfirmationInfoToJSON)),
    };
}


